using NeltharionRPGGame.Interfaces;
using NeltharionRPGGame.Structure;

namespace NeltharionRPGGame
{
    public abstract class Creature : GameObject, IMovable, IRenderable, ICreature
    {
        
        private SpriteType spriteType;
        private int maxHealthPoints;
        private int healthPoints;
        private int defensePoints;
        private int attackPoints;
        private int movementSpeed;
        private int attackRange;
        private bool isAlive;
        private Weapon weaponHeld;
        public event BonusDroppedEventHandler weaponDropped;

        protected Creature(int x, int y, int sizeX, int sizeY,
            int healthPoints, int defensePoints, int attackPoints, int movementSpeed,
            int attackRange, SpriteType spriteType)
            : base(x, y, sizeX, sizeY)
        {
            this.SpriteType = spriteType;
            this.MaximumHealthPoints = healthPoints;
            this.HealthPoints = healthPoints;
            this.DefensePoints = defensePoints;
            this.AttackPoints = attackPoints;
            this.MovementSpeed = movementSpeed;
            this.AttackRange = attackRange;
            this.IsAlive = true;
        }

        public SpriteType SpriteType
        {
            get
            {
                return this.spriteType;
            }

            set
            {
                this.spriteType = value;
            }
        }

        public int MaximumHealthPoints
        {
            get
            {
                return this.maxHealthPoints;
            }

            private set
            {
                checked
                {
                    this.maxHealthPoints = value;
                }
            }
        }

        public int HealthPoints 
        {
            get
            {
                return this.healthPoints;
            }

            private set
            {
                checked
                {
                    this.healthPoints = value;
                    if (this.healthPoints > this.maxHealthPoints)
                    {
                        this.healthPoints = this.maxHealthPoints;
                    }
                    if (this.healthPoints <= 0)
                    {
                        this.IsAlive = false;
                    }
                }
            }
        }

        public int DefensePoints
        {
            get
            {
                return this.defensePoints;
            }

            set
            {
                checked
                {
                    if (value <= 0)
                    {
                        this.defensePoints = 0;
                    }
                    this.defensePoints = value;
                }
            }
        }

        public int AttackPoints
        {
            get
            {
                return this.attackPoints;
            }

            set
            {
                checked
                {
                    if (value <= 0)
                    {
                        this.attackPoints = 0;
                    }
                    this.attackPoints = value;
                } 
            }
        }

        public int AttackRange
        {
            get
            {
                return this.attackRange;
            }

            set
            {
                checked
                {
                    if (value <= 0)
                    {
                        this.attackRange = 0;
                    }
                    this.attackRange = value;
                }
            }
        }

        public int MovementSpeed
        {
            get
            {
                return this.movementSpeed;
            }

            set
            {
                checked
                {
                    if (value <= 0)
                    {
                        this.movementSpeed = 0;
                    }
                    this.movementSpeed = value;
                }
            }
        }

        public bool IsAlive
        {
            get
            {
                return this.isAlive;
            }

            set
            {
                this.isAlive = value;
            }
        }

        public int DirX { get; set; }

        public int DirY { get; set; }  

        // Public Methods
        public virtual void Move()
        {
            this.X += this.DirX * this.MovementSpeed;
            this.Y += this.DirY * this.MovementSpeed;
        }

        public abstract void UseWeaponHeld();

        // The value for this mehtod is generated by
        // the Combat system
        public virtual void UpdateHealthPoints(int healthPointsEffect)
        {
            this.HealthPoints += healthPointsEffect;
        }

        public virtual void UpdateDefencePoints(int defencePoints)
        {
            this.DefensePoints += defencePoints;
        }
    }                              
}
                                   